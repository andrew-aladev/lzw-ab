We want to compress the following string:
"abaaab"

We will create dictionary:
"a" - 97 (char code)
"b" - 98 (char code)
"ab" - 257
"ba" - 258
"aa" - 259
"aab" - 260

We can see that we need to use prefix tree.
Our prefix tree is a bit special.
"aab" has code 260, "aa" - 259, "a" - 97.
We can say "string.substring(0, n)" will have some code for any "n" between "1" and "string.length".
So each node in tree will have a single symbol and code.

Each node can have 256 child nodes.
We want to minimize memory consumption, so will use unidirectional list instead of array.
Each node has code, so it can be implemented as unidirectional list of codes.

For example our dictionary looks like:
"a" (97) -> "b" (257)
         -> "a" (259) -> "b" (260)
"b" (98) -> "a" (258)

It can be converted to codes:
97 -> 257
   -> 259 -> 260
98 -> 258

-----

Codes are unique, lets convert it into array:
97  -> 257, 259
98  -> 258
259 -> 260
261 -> (code is free)

We need a special value to say "code is free".
"0" - "255" are single symbol codes and "256" is a clear code.
For example "a" (97) -> "a" (97) is not possible.
So we can use any code < 257.
Lets use "0", but please define constant instead so anybody can see that it means "code is free".

We can see 3 lists: "[257, 259]", "[258]" and "[260]".
Code "257" says "there is code 259 after me".
Codes "259", "258" and "260" say "no codes after me".
Each code are unique so we can implement lists as array again.

Second array:
257 -> 259
258 -> (no codes after me)
259 -> (no codes after me)
260 -> (no codes after me)

We need a special value to say "no codes after me".
Lets use "0" and please define constant too.

This array will have indexes >= 257.
It will have length equals to "first_array.length - 257".
Indexes will have 257 offset.

First array will point only to the first code.
Next codes can be found in second array.

Result, first array:
97  -> 257
98  -> 258
259 -> 260
261 -> 0

Second array:
0 (257) -> 259
1 (258) -> 0
2 (259) -> 0
3 (260) -> 0

-----

So we covered dictionary with 2 arrays: horizontal and vertical.
How to name them? Terminology is important.
Lets use "first_child_codes" as first array and "next_sibling_codes" as second (from DOM terminology).

Now lets try to encode new data "ca".
Char code for "c" is 99, "first_child_codes[99]" equals "0" and we are going to add first child.
"ca" will have code 261, so "first_child_codes[99] = 261" and we don't need to touch "next_sibling_codes".

Now lets try to encode new data "ac".
Char code for "a" is 97, "first_child_codes[97]" equals "257" and we are going to add next sibling.
"ac" will have code 262, so "first_child_codes[97] = 262" and "next_sibling_codes[262 - 257] = 257"

Result:
"a" (97) -> "c" (262)
         -> "b" (257)
         -> "a" (259) -> "b" (260)
"b" (98) -> "a" (258)
"c" (99) -> "a" (261)

First child codes:
97  -> 262
98  -> 258
99  -> 261
259 -> 260

Next sibling codes:
0 (257) -> 259
1 (258) -> 0
2 (259) -> 0
3 (260) -> 0
4 (261) -> 0
5 (262) -> 257

-----

Now lets try to encode "aac".
Code for "aa" is 259.
But we can't get this information from "First child codes" or "Next sibling codes".

We have to maintain an association between code and it's symbol.
Association between first codes ("0" - "255") and symbols is identity, we don't need to keep it.
We don't need any special value so we don't need to keep 256 too.

This array will have indexes >= 257.
It will have length equals to "first_child_codes.length - 257".
Indexes will have 257 offset.

It can be named as "symbol_by_codes".

Symbol by codes:
0 (257) -> "b"
1 (258) -> "a"
2 (259) -> "a"
3 (260) -> "b"
4 (261) -> "a"
5 (262) -> "c"

Char code for "a" is 97, "first_child_codes[97]" equals "262".
We will traverse all sibling nodes from "262" and find that code "259" has "a" symbol and "first_child_codes[259]" equals "260".
"aac" will have code 263, so "first_child_codes[259] = 263" and "next_sibling_codes[263 - 257] = 260"
Do not forget to "symbol_by_codes[263] = 'a'" too.

Result:
"a" (97) -> "c" (262)
         -> "b" (257)
         -> "a" (259) -> "c" (263)
                      -> "b" (260)
"b" (98) -> "a" (258)
"c" (99) -> "a" (261)

First child codes:
97  -> 262
98  -> 258
99  -> 261
259 -> 263

Next sibling codes:
0 (257) -> 259
1 (258) -> 0
2 (259) -> 263
3 (260) -> 0
4 (261) -> 0
5 (262) -> 257
6 (263) -> 260

Symbol by codes:
0 (257) -> "b"
1 (258) -> "a"
2 (259) -> "a"
3 (260) -> "b"
4 (261) -> "a"
5 (262) -> "c"
6 (263) -> "c"
