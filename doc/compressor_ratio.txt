We have created tar archive from directory and want to compress it (create tar.Z).
Let's imagine that first file in tar will be binary image.
LZW compression will not be effective with binary files.
But there are many text files after binary image in tar.
So we can reset dictionary and send clear code after binary file.

Efficiency of compression can be measured as source byte length / destination byte length.
This efficiency is known as compression ratio (or just ratio).
This parameter changes during data processing.

Let's consider 3 steps:
1. We read 3 byte and output 2 bytes. Ratio is 3/2.
2. We read 2 more bytes and output 1 more byte. Ratio is 5/3.
3. We read 1 more bytes and output 2 more bytes. Ratio is 6/5.

3/2 < 5/3 > 6/5
We can see that ratio from step 2 is bigger than ratio from step 1.
Ratio from step 3 is lower than ratio from step 2.

Ratio is not a smooth curve, we need more consolidated ratio to make a decision about clear.
Original ncompress uses magic gap of 10000 source bytes between ratio checks.

So we have 2 checkpoints: last and current.
Each checkpoint has ratio.
We need to clear if last ratio is greater than current.

There are 2 problems:
1. Source length and destination length can overflow.
2. Division is not accurate.

Lets use simple mathematics.
Let source length = s, destination length = d, new source length - m, new destination length - n.

We want to clear when (s + m) / (d + n) < s / d.
s, m, d, n >= 0.
We don't want to divide by 0 so we need to add special case for d == 0.
So d > 0.

(s + m) / (d + n) - s / d < 0

Let's multiply it by d * (d + n) > 0 (because d > 0 and n >= 0).

s * d + m * d - s * d - s * n < 0
m * d - s * n < 0
m * d < s * n

This formular is much better: we need to process 2 multiplications and compare it.
We can use GMP library for such purpose.
This solution will be accurate and won't limit source length.

We will count these multiplications and comparison once per 10000 new source length.
It won't provide a big performance penalty.

-----

Ncompress counts ratio when:
1. Dictionary is full.
2. New source byte length >= 10000.
3. We have written last code and switched to next prefix symbol.
4. We have at least 1 source symbol pending that will use new dictionary.

Dictionary is not full.
We will increment new source length and new destination length.
Dictionary become full after we have written last code + new source byte length >= 10000.
We can't count ratio now because destination length is 0.
So we will clear ratio and repeat procedure once again.

Dictionary is full.
We will increment new source length and new destination length.
We have written last code + new source byte length >= 10000 + there is at least 1 symbol pending.
We will count ratio now and think about clear.

So this process can be split into 2 steps.

-----

1 step: we need to increment new source length and new destination length until dictionary is full.
What amount of bits should they have to avoid overflow?

-----

What will be the maximum for new source length?
The worst scenario:
Input: "aaa..." > 4G.

First code 97 will be written for 1-st input byte (1 byte).
Second code 257 will be written for 2-st and 3-d bytes (2 bytes).
Third code 258 will be written for 4-th, 5-th and 6-th bytes (3 bytes).

So we have an arithmetic progression.
First element is 1, second is 2.
The amount of elements is (2 ** 16) - 1 - 256.
Total source length is (1 + (2 ** 16) - 257) * ((2 ** 16) - 257) / 2 = 2130706560.

Now dictionary is full.
Than we will read source symbols until any code will be written.
The longest source sequence for destination code is (2 ** 16) - 256.

So total bytes: 2130706560 + (2 ** 16) - 256 < 2 ** 32.
32 bit unassigned integer is enough for new source length.

-----

What will be the maximum for new destination length?

We are going to output code when we have no substring in dictionary.
So we need to count amount of bytes required to write each dictionary code.
8 bit codes (will be written as 9 bit codes): 256.
9 bit codes: (2 ** 9) - 1 - 257 = 254.
10 bit codes: (2 ** 10) - 1 - (2 ** 9) - 1 = 510.
We can see than n bit code length equals (2 ** (n - 1)) - 2.

Total amount of bits:
  256 * 9 +
  ((2 ** 8) - 2)  * 9 +
  ((2 ** 9) - 2)  * 10 +
  ((2 ** 10) - 2) * 11 +
  ((2 ** 11) - 2) * 12 +
  ((2 ** 12) - 2) * 13 +
  ((2 ** 13) - 2) * 14 +
  ((2 ** 14) - 2) * 15 +
  ((2 ** 15) - 2) * 16
  = 983352.
Total amount of bytes: 122919.

Now dictionary is full.
Than we will wait for any destination code.

Please be aware that this scenario is not possible.
It is just a way to limit new destination length from the top.

So total bytes: 122919 + 2 = 122921 < 2 ** 32.
32 bit unassigned integer is enough for new destination length too.

-----

2 step: we need to increment new source length and new destination length when dictionary is full.
Will 32 bit unassigned integers be enough to avoid overflow?

-----

What will be the maximum for new source length?

The worst scenario:
We have counted 9999 source bytes.
Than we are waiting for any destination code.
The longest source sequence for destination code is (2 ** 16) - 256.

Please be aware that this scenario is not possible.
It is just a way to provide a rough limit for new source length from the top.

So total bytes: 9999 + (2 ** 16) - 256 < 2 ** 32.
32 bit unassigned integer is enough for new source length.

-----

What will be the maximum for new destination length?

The worst scenario:
Each source byte equals to 2 destination bytes.

Please be aware that this scenario is not possible.
It is just a way to provide a rough limit for new destination length from the top.

So total bytes: 20000 < 2 ** 32.
32 bit unassigned integer is enough for new destination length too.
