LZWS(3)
=======


NAME
----
lzws_compress_string - Simple API for string compressor.


SYNOPSIS
--------
*#include <lzws/string.h>*

----
lzws_result_t lzws_compress_string(
  lzws_byte_t* source,
  size_t source_length,
  lzws_byte_t** destination_ptr,
  size_t* destination_length_ptr,
  size_t destination_buffer_length,
  const lzws_compressor_options_t* options_ptr);
----


OPTIONS
-------
*`lzws_byte_t* source`*::
  Pointer to source data like text.

*`size_t source_length`*::
  Source data length like text length.

*`lzws_byte_t** destination_ptr`*::
  Pointer to destination.

*`size_t* destination_length_ptr`*::
  Pointer to destination length.

*`size_t destination_buffer_length`*::
  Buffer length for destination.
  If buffer length is *0* optimal buffer length will be auto selected.
  Minimal buffer length is *2*.

*`const lzws_compressor_options_t* options_ptr`*::
  Options related to algorithm customization.
  It may be *NULL* (*LZWS_COMPRESSOR_DEFAULT_OPTIONS* will be used).

----
typedef struct
{
  bool             without_magic_header;
  lzws_byte_fast_t max_code_bit_length;
  bool             block_mode;
  bool             msb;
  bool             unaligned_bit_groups;
  bool             quiet;
} lzws_compressor_options_t;
----

*`bool without_magic_header`*::
  Disable writing of magic header.

*`lzws_byte_fast_t max_code_bit_length`*::
  Set max code bit length.
  Min value *LZWS_LOWEST_MAX_CODE_BIT_LENGTH*, max - *LZWS_BIGGEST_MAX_CODE_BIT_LENGTH*.
  This value will be written into destination header.

*`bool block_mode`*::
  Enable block mode.
  This value will be written into destination header.

*`bool msb`*::
  Enable most significant bit mode.
  This value won't be written into destination header.

*`bool unaligned_bit_groups`*::
  Enable unaligned bit groups.
  This value won't be written into destination header.

*`bool quiet`*::
  Disable error messages.


RETURN VALUE
------------
Returns *0* if compression was successful, otherwise not *0*.
See header file for more details about possible results.


DESCRIPTION
-----------
This function allocates buffer as destination, compresses source into destination and increases destination.
If compression was successful - you should *free* destination.

You can use this simple string compressor API with small amount of data.
Memory required is source length + destination length + buffer length + dictionary size.
See docs about what amount of memory is required for each type of dictionary.


EXAMPLE
-------
You need to compress a small string and result should be compatible with UNIX compress utility.

----
const char text[]      = "example text";
size_t     text_length = strlen(text);
char*      compressed_text;
size_t     compressed_text_length;

// Default options may be NULL or LZWS_COMPRESSOR_DEFAULT_OPTIONS.
lzws_compressor_options_t options = {
  .without_magic_header = false,
  .max_code_bit_length  = LZWS_BIGGEST_MAX_CODE_BIT_LENGTH,
  .block_mode           = true,
  .msb                  = false,
  .unaligned_bit_groups = false,
  .quiet                = false
};

lzws_result_t result = lzws_compress_string(
  (lzws_byte_t*)text,
  text_length,
  (lzws_byte_t**)&compressed_text,
  &compressed_text_length,
  0,
  &options);

if (result != 0) {
  return 1;
}

print_binary(compressed_text, compressed_text_length);

free(compressed_text);
----


SEE ALSO
--------
*lzws_decompress_string*(3)
