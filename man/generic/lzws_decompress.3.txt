LZWS(3)
=======


NAME
----
lzws_decompress - Decompress portion of data.


SYNOPSIS
--------
*#include <lzws/decompressor/main.h>*

----
lzws_result_t lzws_decompress(
  lzws_decompressor_state_t* state_ptr,
  uint8_t** source_ptr, size_t* source_length_ptr,
  uint8_t** destination_ptr, size_t* destination_length_ptr);
----


OPTIONS
-------
*`lzws_decompressor_state_t* state_ptr`*::
  Pointer to decompressor state provided by *lzws_decompressor_get_initial_state*.

*`uint8_t** source_ptr`*::
  Pointer to source data.

*`size_t* source_length_ptr`*::
  Pointer to source data length.

*`uint8_t** destination_ptr`*::
  Pointer to destination data.

*`size_t* destination_length_ptr`*::
  Pointer to destination data length.


RETURN VALUE
------------
Returns *0* or *LZWS_DECOMPRESSOR_NEEDS_MORE_DESTINATION* if decompression was successful.
See header file *lzws/decompressor/common.h* for more details about other results.


DESCRIPTION
-----------
This function decompresses portion of source data into destination.
It is possible that it won't be enough destination.
You can accept *LZWS_DECOMPRESSOR_NEEDS_MORE_DESTINATION* and increase destination or use another destination.

This function moves *source_ptr* and *destination_ptr* forward.
It also decreases *source_length_ptr* and *destination_length_ptr*.


PSEUDO EXAMPLE
--------------
You have a portion of source data, you want to decompress it.

----
while (true) {
  lzws_result_t result = lzws_decompress(
    state_ptr,
    &source, &source_length,
    &destination, &destination_length);

  if (result == 0) {
    give_more_source(&source, &source_length);
  } else if (result == LZWS_DECOMPRESSOR_NEEDS_MORE_DESTINATION) {
    increase_destination(&destination, &destination_length);
  } else {
    return 1;
  }
}
----


SEE ALSO
--------
*lzws_decompressor_read_magic_header*(3)
*lzws_decompressor_get_initial_state*(3)
*lzws_decompressor_free_state*(3)
